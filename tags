!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Arg	dwm.c	/^} Arg;$/;"	t	typeref:union:__anon6	file:
BUTTONMASK	dwm.c	45;"	d	file:
Button	dwm.c	/^} Button;$/;"	t	typeref:struct:__anon7	file:
Button6	config.h	213;"	d
Button7	config.h	214;"	d
Button8	config.h	215;"	d
Button9	config.h	216;"	d
CC	config.mk	/^CC = cc$/;"	m
CFLAGS	config.mk	/^CFLAGS = -g -std=c99 -pedantic -Wall -O0 ${INCS} ${CPPFLAGS}$/;"	m
CLEANMASK	dwm.c	46;"	d	file:
CPPFLAGS	config.mk	/^CPPFLAGS = -DVERSION=\\"${VERSION}\\" ${XINERAMAFLAGS}$/;"	m
Client	dwm.c	/^struct Client {$/;"	s	file:
Client	dwm.c	/^typedef struct Client Client;$/;"	t	typeref:struct:Client	file:
ClkClientWin	dwm.c	/^	   ClkClientWin, ClkRootWin, ClkLast };				\/* clicks *\/$/;"	e	enum:__anon5	file:
ClkLast	dwm.c	/^	   ClkClientWin, ClkRootWin, ClkLast };				\/* clicks *\/$/;"	e	enum:__anon5	file:
ClkLtSymbol	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon5	file:
ClkRootWin	dwm.c	/^	   ClkClientWin, ClkRootWin, ClkLast };				\/* clicks *\/$/;"	e	enum:__anon5	file:
ClkStatusText	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon5	file:
ClkTagBar	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon5	file:
ClkWinTitle	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon5	file:
ColBG	dwm.c	/^enum { ColBorder, ColFG, ColBG, ColLast };				\/* color *\/$/;"	e	enum:__anon2	file:
ColBorder	dwm.c	/^enum { ColBorder, ColFG, ColBG, ColLast };				\/* color *\/$/;"	e	enum:__anon2	file:
ColFG	dwm.c	/^enum { ColBorder, ColFG, ColBG, ColLast };				\/* color *\/$/;"	e	enum:__anon2	file:
ColLast	dwm.c	/^enum { ColBorder, ColFG, ColBG, ColLast };				\/* color *\/$/;"	e	enum:__anon2	file:
CurLast	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast };		\/* cursor *\/$/;"	e	enum:__anon1	file:
CurMove	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast };		\/* cursor *\/$/;"	e	enum:__anon1	file:
CurNormal	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast };		\/* cursor *\/$/;"	e	enum:__anon1	file:
CurResize	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast };		\/* cursor *\/$/;"	e	enum:__anon1	file:
DC	dwm.c	/^} DC; \/* draw context *\/$/;"	t	typeref:struct:__anon8	file:
DWINDLE	config.h	/^	DWINDLE$/;"	e	enum:layout
FLOAT	config.h	/^	FLOAT,$/;"	e	enum:layout
HEIGHT	dwm.c	55;"	d	file:
INCS	config.mk	/^INCS = -I. -I\/usr\/include -I${X11INC}$/;"	m
INTERSECT	dwm.c	47;"	d	file:
ISVISIBLE	dwm.c	49;"	d	file:
Key	dwm.c	/^} Key;$/;"	t	typeref:struct:__anon10	file:
LDFLAGS	config.mk	/^LDFLAGS = -g ${LIBS}$/;"	m
LENGTH	dwm.c	50;"	d	file:
LIBS	config.mk	/^LIBS = -L\/usr\/lib -lc -L${X11LIB} -lX11 ${XINERAMALIBS}$/;"	m
Layout	dwm.c	/^} Layout;$/;"	t	typeref:struct:__anon11	file:
MANPREFIX	config.mk	/^MANPREFIX = ${PREFIX}\/share\/man$/;"	m
MAX	dwm.c	51;"	d	file:
MIN	dwm.c	52;"	d	file:
MODKEY	config.def.h	44;"	d
MODKEY	config.h	123;"	d
MONOCLE	config.h	/^	MONOCLE,$/;"	e	enum:layout
MOUSEMASK	dwm.c	53;"	d	file:
Monitor	dwm.c	/^struct Monitor {$/;"	s	file:
Monitor	dwm.c	/^typedef struct Monitor Monitor;$/;"	t	typeref:struct:Monitor	file:
NetActiveWindow	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon3	file:
NetClientList	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast };     \/* EWMH atoms *\/$/;"	e	enum:__anon3	file:
NetLast	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast };     \/* EWMH atoms *\/$/;"	e	enum:__anon3	file:
NetSupported	dwm.c	/^enum { NetSupported, NetWMName, NetWMState,$/;"	e	enum:__anon3	file:
NetWMFullscreen	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon3	file:
NetWMName	dwm.c	/^enum { NetSupported, NetWMName, NetWMState,$/;"	e	enum:__anon3	file:
NetWMState	dwm.c	/^enum { NetSupported, NetWMName, NetWMState,$/;"	e	enum:__anon3	file:
NetWMWindowType	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon3	file:
NetWMWindowTypeDialog	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast };     \/* EWMH atoms *\/$/;"	e	enum:__anon3	file:
NumTags	dwm.c	/^struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };$/;"	s	file:
OPACITY	dwm.c	945;"	d	file:
OPAQU	config.h	24;"	d
OPAQUE	dwm.c	944;"	d	file:
PREFIX	config.mk	/^PREFIX = \/usr$/;"	m
Rule	dwm.c	/^} Rule;$/;"	t	typeref:struct:__anon12	file:
SHCMD	config.def.h	52;"	d
SHCMD	config.h	131;"	d
SPIRAL	config.h	/^	SPIRAL,$/;"	e	enum:layout
TAGKEYS	config.def.h	45;"	d
TAGKEYS	config.h	124;"	d
TAGMASK	dwm.c	56;"	d	file:
TEXTW	dwm.c	57;"	d	file:
TILE	config.h	/^	TILE = 0,$/;"	e	enum:layout
TRANS	config.h	23;"	d
VERSION	config.mk	/^VERSION = 6.0$/;"	m
WIDTH	dwm.c	54;"	d	file:
WMDelete	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast };		 \/* default atoms *\/$/;"	e	enum:__anon4	file:
WMLast	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast };		 \/* default atoms *\/$/;"	e	enum:__anon4	file:
WMProtocols	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast };		 \/* default atoms *\/$/;"	e	enum:__anon4	file:
WMState	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast };		 \/* default atoms *\/$/;"	e	enum:__anon4	file:
WMTakeFocus	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast };		 \/* default atoms *\/$/;"	e	enum:__anon4	file:
WORKSPACE	config.h	133;"	d
X11INC	config.mk	/^X11INC = \/usr\/X11R6\/include$/;"	m
X11LIB	config.mk	/^X11LIB = \/usr\/X11R6\/lib$/;"	m
XINERAMAFLAGS	config.mk	/^XINERAMAFLAGS = -DXINERAMA$/;"	m
XINERAMALIBS	config.mk	/^XINERAMALIBS = -L${X11LIB} -lXinerama$/;"	m
allnonfloat	tinou.c	/^allnonfloat(const Arg *arg) {$/;"	f
applyrules	dwm.c	/^applyrules(Client *c) {$/;"	f
applysizehints	dwm.c	/^applysizehints(Client *c, int *x, int *y, int *w, int *h, Bool interact) {$/;"	f
arg	dwm.c	/^	const Arg arg;$/;"	m	struct:__anon10	file:
arg	dwm.c	/^	const Arg arg;$/;"	m	struct:__anon7	file:
arrange	dwm.c	/^	void (*arrange)(Monitor *);$/;"	m	struct:__anon11	file:
arrange	dwm.c	/^arrange(Monitor *m) {$/;"	f
arrangemon	dwm.c	/^arrangemon(Monitor *m) {$/;"	f
ascent	dwm.c	/^		int ascent;$/;"	m	struct:__anon8::__anon9	file:
attach	dwm.c	/^attach(Client *c) {$/;"	f
attachabove	dwm.c	/^attachabove(Client *c) {$/;"	f
attachstack	dwm.c	/^attachstack(Client *c) {$/;"	f
barOpacity	config.h	/^static double barOpacity = 0.65;$/;"	v
barwin	dwm.c	/^	Window barwin;$/;"	m	struct:Monitor	file:
baseh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
basew	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
bh	dwm.c	/^static int bh, blw = 0;		 \/* bar geometry *\/$/;"	v	file:
blw	dwm.c	/^static int bh, blw = 0;		 \/* bar geometry *\/$/;"	v	file:
borderpx	config.def.h	/^static const unsigned int borderpx  = 1;        \/* border pixel of windows *\/$/;"	v
borderpx	config.h	/^static const unsigned int borderpx  = 1;        \/* border pixel of windows *\/$/;"	v
broken	dwm.c	/^static const char broken[] = "broken";$/;"	v	file:
button	dwm.c	/^	unsigned int button;$/;"	m	struct:__anon7	file:
buttonpress	dwm.c	/^buttonpress(XEvent *e) {$/;"	f
buttons	config.def.h	/^static Button buttons[] = {$/;"	v
buttons	config.h	/^static Button buttons[] = {$/;"	v
bw	dwm.c	/^	int bw, oldbw;$/;"	m	struct:Client	file:
by	dwm.c	/^	int by;				  \/* bar geometry *\/$/;"	m	struct:Monitor	file:
checkotherwm	dwm.c	/^checkotherwm(void) {$/;"	f
class	dwm.c	/^	const char *class;$/;"	m	struct:__anon12	file:
cleanup	dwm.c	/^cleanup(void) {$/;"	f
cleanupmon	dwm.c	/^cleanupmon(Monitor *mon) {$/;"	f
cleartags	dwm.c	/^cleartags(Monitor *m){$/;"	f
clearurgent	dwm.c	/^clearurgent(Client *c) {$/;"	f
click	dwm.c	/^	unsigned int click;$/;"	m	struct:__anon7	file:
client_opacity_set	dwm.c	/^client_opacity_set(Client *c, double opacity)$/;"	f
clientmessage	dwm.c	/^clientmessage(XEvent *e) {$/;"	f
clients	dwm.c	/^	Client *clients;$/;"	m	struct:Monitor	file:
configure	dwm.c	/^configure(Client *c) {$/;"	f
configurenotify	dwm.c	/^configurenotify(XEvent *e) {$/;"	f
configurerequest	dwm.c	/^configurerequest(XEvent *e) {$/;"	f
createmon	dwm.c	/^createmon(void) {$/;"	f
cursor	dwm.c	/^static Cursor cursor[CurLast];$/;"	v	file:
curtag	dwm.c	/^	int curtag;$/;"	m	struct:Monitor	file:
dc	dwm.c	/^static DC dc;$/;"	v	file:
dclipcmd	config.h	/^static const char *dclipcmd[] = { "dclip", "paste", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor , "-sf", selfgcolor, NULL };$/;"	v
descent	dwm.c	/^		int descent;$/;"	m	struct:__anon8::__anon9	file:
destroynotify	dwm.c	/^destroynotify(XEvent *e) {$/;"	f
detach	dwm.c	/^detach(Client *c) {$/;"	f
detachstack	dwm.c	/^detachstack(Client *c) {$/;"	f
die	dwm.c	/^die(const char *errstr, ...) {$/;"	f
dirtomon	dwm.c	/^dirtomon(int dir) {$/;"	f
dmenucmd	config.def.h	/^static const char *dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };$/;"	v
dmenucmd	config.h	/^static const char *dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };$/;"	v
dpy	dwm.c	/^static Display *dpy;$/;"	v	file:
drawable	dwm.c	/^	Drawable drawable;$/;"	m	struct:__anon8	file:
drawbar	dwm.c	/^drawbar(Monitor *m) {$/;"	f
drawbars	dwm.c	/^drawbars(void) {$/;"	f
drawsquare	dwm.c	/^drawsquare(Bool filled, Bool empty, Bool invert, unsigned long col[ColLast]) {$/;"	f
drawtext	dwm.c	/^drawtext(const char *text, unsigned long col[ColLast], Bool invert) {$/;"	f
dwindle	fibonacci.c	/^dwindle(Monitor *mon) {$/;"	f
enternotify	dwm.c	/^enternotify(XEvent *e) {$/;"	f
expose	dwm.c	/^expose(XEvent *e) {$/;"	f
f	dwm.c	/^	float f;$/;"	m	union:__anon6	file:
fibonacci	fibonacci.c	/^fibonacci(Monitor *mon, int s) {$/;"	f
focus	dwm.c	/^focus(Client *c) {$/;"	f
focusin	dwm.c	/^focusin(XEvent *e) { \/* there are some broken focus acquiring clients *\/$/;"	f
focuslast	tinou.c	/^focuslast(const Arg *arg) {$/;"	f	file:
focusmon	dwm.c	/^focusmon(const Arg *arg) {$/;"	f
focusstack	dwm.c	/^focusstack(const Arg *arg) {$/;"	f
font	config.def.h	/^static const char font[]            = "-*-terminus-medium-r-*-*-16-*-*-*-*-*-*-*";$/;"	v
font	config.h	/^static const char font[]            = "-*-clean-medium-r-normal-*-12-*-*-*-*-*-iso8859-1";$/;"	v
font	dwm.c	/^	} font;$/;"	m	struct:__anon8	typeref:struct:__anon8::__anon9	file:
func	dwm.c	/^	void (*func)(const Arg *);$/;"	m	struct:__anon10	file:
func	dwm.c	/^	void (*func)(const Arg *arg);$/;"	m	struct:__anon7	file:
gc	dwm.c	/^	GC gc;$/;"	m	struct:__anon8	file:
getatomprop	dwm.c	/^getatomprop(Client *c, Atom prop) {$/;"	f
getclientunderpt	dwm.c	/^getclientunderpt(int x, int y) {$/;"	f
getcolor	dwm.c	/^getcolor(const char *colstr) {$/;"	f
getrootptr	dwm.c	/^getrootptr(int *x, int *y) {$/;"	f
getstate	dwm.c	/^getstate(Window w) {$/;"	f
gettextprop	dwm.c	/^gettextprop(Window w, Atom atom, char *text, unsigned int size) {$/;"	f
grabbuttons	dwm.c	/^grabbuttons(Client *c, Bool focused) {$/;"	f
grabkeys	dwm.c	/^grabkeys(void) {$/;"	f
h	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
h	dwm.c	/^	int x, y, w, h;$/;"	m	struct:__anon8	file:
handler	dwm.c	/^static void (*handler[LASTEvent]) (XEvent *) = {$/;"	v	file:
height	dwm.c	/^		int height;$/;"	m	struct:__anon8::__anon9	file:
histfile	config.h	/^static const char histfile[]        = "\/home\/tinou\/.surf\/history.dmenu";$/;"	v
i	dwm.c	/^	int i;$/;"	m	union:__anon6	file:
inch	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
incw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
initfont	dwm.c	/^initfont(const char *fontstr) {$/;"	f
initlayout	config.h	/^static int initlayout = 0;$/;"	v
instance	dwm.c	/^	const char *instance;$/;"	m	struct:__anon12	file:
isfixed	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, nofocus, isfullscreen;$/;"	m	struct:Client	file:
isfloating	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, nofocus, isfullscreen;$/;"	m	struct:Client	file:
isfloating	dwm.c	/^	Bool isfloating;$/;"	m	struct:__anon12	file:
isfullscreen	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, nofocus, isfullscreen;$/;"	m	struct:Client	file:
istransparent	dwm.c	/^	double istransparent;$/;"	m	struct:__anon12	file:
isuniquegeom	dwm.c	/^isuniquegeom(XineramaScreenInfo *unique, size_t n, XineramaScreenInfo *info) {$/;"	f	file:
isurgent	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, nofocus, isfullscreen;$/;"	m	struct:Client	file:
keypress	dwm.c	/^keypress(XEvent *e) {$/;"	f
keys	config.def.h	/^static Key keys[] = {$/;"	v
keys	config.h	/^static Key keys[] = {$/;"	v
keysym	dwm.c	/^	KeySym keysym;$/;"	m	struct:__anon10	file:
killclient	dwm.c	/^killclient(const Arg *arg) {$/;"	f
lastclient	dwm.c	/^static Client* lastclient = NULL;$/;"	v	file:
layout	config.h	/^enum layout {$/;"	g
layoutaxis	config.h	/^static const int layoutaxis[] = {$/;"	v
layouts	config.def.h	/^static const Layout layouts[] = {$/;"	v
layouts	config.h	/^static const Layout layouts[] = {$/;"	v
limitexceeded	dwm.c	/^struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };$/;"	m	struct:NumTags	file:
lt	dwm.c	/^	const Layout *lt[2];$/;"	m	struct:Monitor	file:
ltaxes	dwm.c	/^	int ltaxes[10][3];$/;"	m	struct:Monitor	file:
ltaxis	dwm.c	/^	int ltaxis[3];$/;"	m	struct:Monitor	file:
lts	dwm.c	/^	const Layout *lts[10];$/;"	m	struct:Monitor	file:
ltsymbol	dwm.c	/^	char ltsymbol[16];$/;"	m	struct:Monitor	file:
main	dwm.c	/^main(int argc, char *argv[]) {$/;"	f
makeKeyEvent	ctrlmap.c	/^XKeyEvent makeKeyEvent(Display *display, Window win, Window winRoot, Bool press, KeyCode keycode, int modifiers)$/;"	f
manage	dwm.c	/^manage(Window w, XWindowAttributes *wa) {$/;"	f
mappingnotify	dwm.c	/^mappingnotify(XEvent *e) {$/;"	f
maprequest	dwm.c	/^maprequest(XEvent *e) {$/;"	f
mask	dwm.c	/^	unsigned int mask;$/;"	m	struct:__anon7	file:
maxa	dwm.c	/^	float mina, maxa;$/;"	m	struct:Client	file:
maxh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
maxw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
mfact	config.def.h	/^static const float mfact      = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v
mfact	config.h	/^static const float mfact      = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v
mfact	dwm.c	/^	float mfact;$/;"	m	struct:Monitor	file:
mfacts	dwm.c	/^	double mfacts[10];$/;"	m	struct:Monitor	file:
mh	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
mina	dwm.c	/^	float mina, maxa;$/;"	m	struct:Client	file:
minh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
minw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
mirrorlayout	flextile.h	/^mirrorlayout(const Arg *arg) {$/;"	f
mod	dwm.c	/^	unsigned int mod;$/;"	m	struct:__anon10	file:
mon	dwm.c	/^	Monitor *mon;$/;"	m	struct:Client	file:
monitor	dwm.c	/^	int monitor;$/;"	m	struct:__anon12	file:
monocle	dwm.c	/^monocle(Monitor *m) {$/;"	f
mons	dwm.c	/^static Monitor *mons = NULL, *selmon = NULL;$/;"	v	file:
motionnotify	dwm.c	/^motionnotify(XEvent *e) {$/;"	f
movemouse	dwm.c	/^movemouse(const Arg *arg) {$/;"	f
msplit	dwm.c	/^	unsigned int msplit;$/;"	m	struct:Monitor	file:
msplits	dwm.c	/^	unsigned int msplits[10];$/;"	m	struct:Monitor	file:
mw	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
mx	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
my	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
name	dwm.c	/^	char name[256];$/;"	m	struct:Client	file:
netatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast];$/;"	v	file:
neverfocus	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, nofocus, isfullscreen;$/;"	m	struct:Client	file:
next	dwm.c	/^	Client *next;$/;"	m	struct:Client	file:
next	dwm.c	/^	Monitor *next;$/;"	m	struct:Monitor	file:
nexttiled	dwm.c	/^nexttiled(Client *c) {$/;"	f
nofocus	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, nofocus, isfullscreen;$/;"	m	struct:Client	file:
nofocus	dwm.c	/^	Bool nofocus;$/;"	m	struct:__anon12	file:
norm	dwm.c	/^	unsigned long norm[ColLast];$/;"	m	struct:__anon8	file:
normbgcolor	config.def.h	/^static const char normbgcolor[]     = "#cccccc";$/;"	v
normbgcolor	config.h	/^static const char normbgcolor[]     = "#222222";$/;"	v
normbordercolor	config.def.h	/^static const char normbordercolor[] = "#cccccc";$/;"	v
normbordercolor	config.h	/^static const char normbordercolor[] = "#444444";$/;"	v
normfgcolor	config.def.h	/^static const char normfgcolor[]     = "#000000";$/;"	v
normfgcolor	config.h	/^static const char normfgcolor[]     = "#bbbbbb";$/;"	v
num	dwm.c	/^	int num;$/;"	m	struct:Monitor	file:
numlockmask	dwm.c	/^static unsigned int numlockmask = 0;$/;"	v	file:
oldbw	dwm.c	/^	int bw, oldbw;$/;"	m	struct:Client	file:
oldh	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldstate	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, nofocus, isfullscreen;$/;"	m	struct:Client	file:
oldw	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldx	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldy	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
opacity	dwm.c	/^	double opacity;$/;"	m	struct:Client	file:
opacitychange	tinou.c	/^opacitychange(const Arg *arg) {$/;"	f	file:
pop	dwm.c	/^pop(Client *c) {$/;"	f
prevtag	dwm.c	/^	int prevtag;$/;"	m	struct:Monitor	file:
prevtiled	push.c	/^prevtiled(Client *c) {$/;"	f	file:
propertynotify	dwm.c	/^propertynotify(XEvent *e) {$/;"	f
pushdown	push.c	/^pushdown(const Arg *arg) {$/;"	f	file:
pushup	push.c	/^pushup(const Arg *arg) {$/;"	f	file:
quit	dwm.c	/^quit(const Arg *arg) {$/;"	f
recttomon	dwm.c	/^recttomon(int x, int y, int w, int h) {$/;"	f
resize	dwm.c	/^resize(Client *c, int x, int y, int w, int h, Bool interact) {$/;"	f
resizeclient	dwm.c	/^resizeclient(Client *c, int x, int y, int w, int h) {$/;"	f
resizefast	dwm.c	/^resizefast(Client *c, int x, int y, int w, int h) {$/;"	f
resizehints	config.def.h	/^static const Bool resizehints = True; \/* True means respect size hints in tiled resizals *\/$/;"	v
resizemouse	dwm.c	/^resizemouse(const Arg *arg) {$/;"	f
restack	dwm.c	/^restack(Monitor *m) {$/;"	f
rh	dwm.c	/^	Bool rh;$/;"	m	struct:Client	file:
rh	dwm.c	/^	Bool rh;$/;"	m	struct:__anon12	file:
root	dwm.c	/^static Window root;$/;"	v	file:
rotateclients	tinou.c	/^rotateclients (const Arg *arg) {$/;"	f	file:
rotatelayoutaxis	flextile.h	/^rotatelayoutaxis(const Arg *arg) {$/;"	f
rules	config.def.h	/^static const Rule rules[] = {$/;"	v
rules	config.h	/^static const Rule rules[] = {$/;"	v
run	dwm.c	/^run(void) {$/;"	f
running	dwm.c	/^static Bool running = True;$/;"	v	file:
scan	dwm.c	/^scan(void) {$/;"	f
screen	dwm.c	/^static int screen;$/;"	v	file:
screencmd	config.h	/^static const char *screencmd[]  = { "urxvt", "-e", "screen", "-xRR", NULL };$/;"	v
sel	dwm.c	/^	Client *sel;$/;"	m	struct:Monitor	file:
sel	dwm.c	/^	unsigned long sel[ColLast];$/;"	m	struct:__anon8	file:
selbgcolor	config.def.h	/^static const char selbgcolor[]      = "#0066ff";$/;"	v
selbgcolor	config.h	/^static const char selbgcolor[]      = "#005577";$/;"	v
selbordercolor	config.def.h	/^static const char selbordercolor[]  = "#0066ff";$/;"	v
selbordercolor	config.h	/^static const char selbordercolor[]  = "#005577";$/;"	v
selfgcolor	config.def.h	/^static const char selfgcolor[]      = "#ffffff";$/;"	v
selfgcolor	config.h	/^static const char selfgcolor[]      = "#eeeeee";$/;"	v
sellt	dwm.c	/^	unsigned int sellt;$/;"	m	struct:Monitor	file:
selmon	dwm.c	/^static Monitor *mons = NULL, *selmon = NULL;$/;"	v	file:
seltags	dwm.c	/^	unsigned int seltags;$/;"	m	struct:Monitor	file:
sendKey	ctrlmap.c	/^void sendKey(KeyCode keycode, int modifiers)$/;"	f
sendbackslash	ctrlmap.c	/^static void sendbackslash(const Arg *arg)$/;"	f	file:
sendbracketleft	ctrlmap.c	/^static void sendbracketleft(const Arg *arg)$/;"	f	file:
sendbracketright	ctrlmap.c	/^static void sendbracketright(const Arg *arg)$/;"	f	file:
sendevent	dwm.c	/^sendevent(Client *c, Atom proto) {$/;"	f
sendkey	ctrlmap.c	/^static void sendkey(const Arg *arg)$/;"	f	file:
sendmon	dwm.c	/^sendmon(Client *c, Monitor *m) {$/;"	f
set	dwm.c	/^		XFontSet set;$/;"	m	struct:__anon8::__anon9	file:
setclientstate	dwm.c	/^setclientstate(Client *c, long state) {$/;"	f
setfocus	dwm.c	/^setfocus(Client *c) {$/;"	f
setfullscreen	dwm.c	/^setfullscreen(Client *c, Bool fullscreen) {$/;"	f
setlayout	dwm.c	/^setlayout(const Arg *arg) {$/;"	f
setmfact	dwm.c	/^setmfact(const Arg *arg) {$/;"	f
setup	dwm.c	/^setup(void) {$/;"	f
sh	dwm.c	/^static int sw, sh;			 \/* X display screen geometry width, height *\/$/;"	v	file:
shiftmastersplit	flextile.h	/^shiftmastersplit(const Arg *arg) {$/;"	f
showbar	config.def.h	/^static const Bool showbar           = True;     \/* False means no bar *\/$/;"	v
showbar	config.h	/^static const Bool showbar           = True;     \/* False means no bar *\/$/;"	v
showbar	dwm.c	/^	Bool showbar;$/;"	m	struct:Monitor	file:
showbars	dwm.c	/^	Bool showbars[10];$/;"	m	struct:Monitor	file:
showhide	dwm.c	/^showhide(Client *c) {$/;"	f
sigchld	dwm.c	/^sigchld(int unused) {$/;"	f
snap	config.def.h	/^static const unsigned int snap      = 32;       \/* snap pixel *\/$/;"	v
snap	config.h	/^static const unsigned int snap      = 32;       \/* snap pixel *\/$/;"	v
snext	dwm.c	/^	Client *snext;$/;"	m	struct:Client	file:
spawn	dwm.c	/^spawn(const Arg *arg) {$/;"	f
spiral	fibonacci.c	/^spiral(Monitor *mon) {$/;"	f
stack	dwm.c	/^	Client *stack;$/;"	m	struct:Monitor	file:
startup	dwm.c	/^static Bool startup = True;$/;"	v	file:
stext	dwm.c	/^static char stext[256];$/;"	v	file:
sw	dwm.c	/^static int sw, sh;			 \/* X display screen geometry width, height *\/$/;"	v	file:
swap	dwm.c	/^swap(Client *c1, Client *c2) {$/;"	f
symbol	dwm.c	/^	const char *symbol;$/;"	m	struct:__anon11	file:
tag	dwm.c	/^tag(const Arg *arg) {$/;"	f
tagmon	dwm.c	/^tagmon(const Arg *arg) {$/;"	f
tags	config.def.h	/^static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };$/;"	v
tags	config.h	/^static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };$/;"	v
tags	dwm.c	/^	unsigned int tags;$/;"	m	struct:Client	file:
tags	dwm.c	/^	unsigned int tags;$/;"	m	struct:__anon12	file:
tagset	dwm.c	/^	unsigned int tagset[2];$/;"	m	struct:Monitor	file:
termcmd	config.def.h	/^static const char *termcmd[]  = { "uxterm", NULL };$/;"	v
termcmd	config.h	/^static const char *termcmd[]  = { "urxvt", NULL };$/;"	v
textnw	dwm.c	/^textnw(const char *text, unsigned int len) {$/;"	f
tile	flextile.h	/^tile(Monitor *m) {$/;"	f
title	dwm.c	/^	const char *title;$/;"	m	struct:__anon12	file:
togglebar	dwm.c	/^togglebar(const Arg *arg) {$/;"	f
togglefloating	dwm.c	/^togglefloating(const Arg *arg) {$/;"	f
togglemonocle	tinou.c	/^togglemonocle(const Arg *arg) {$/;"	f	file:
toggletag	dwm.c	/^toggletag(const Arg *arg) {$/;"	f
toggleview	dwm.c	/^toggleview(const Arg *arg) {$/;"	f
toggleviews	tinou.c	/^toggleviews(const Arg *arg) {$/;"	f	file:
topbar	config.def.h	/^static const Bool topbar            = True;     \/* False means bottom bar *\/$/;"	v
topbar	config.h	/^static const Bool topbar            = True;    \/* False means bottom bar *\/$/;"	v
topbar	dwm.c	/^	Bool topbar;$/;"	m	struct:Monitor	file:
ttbarclick	tinou.c	/^ttbarclick(const Arg *arg) {$/;"	f	file:
ui	dwm.c	/^	unsigned int ui;$/;"	m	union:__anon6	file:
unfocus	dwm.c	/^unfocus(Client *c, Bool setfocus) {$/;"	f
unmanage	dwm.c	/^unmanage(Client *c, Bool destroyed) {$/;"	f
unmapnotify	dwm.c	/^unmapnotify(XEvent *e) {$/;"	f
updatebarpos	dwm.c	/^updatebarpos(Monitor *m) {$/;"	f
updatebars	dwm.c	/^updatebars(void) {$/;"	f
updateclientlist	dwm.c	/^updateclientlist() {$/;"	f
updategeom	dwm.c	/^updategeom(void) {$/;"	f
updatenumlockmask	dwm.c	/^updatenumlockmask(void) {$/;"	f
updatesizehints	dwm.c	/^updatesizehints(Client *c) {$/;"	f
updatestatus	dwm.c	/^updatestatus(void) {$/;"	f
updatetitle	dwm.c	/^updatetitle(Client *c) {$/;"	f
updatewindowtype	dwm.c	/^updatewindowtype(Client *c) {$/;"	f
updatewmhints	dwm.c	/^updatewmhints(Client *c) {$/;"	f
v	dwm.c	/^	const void *v;$/;"	m	union:__anon6	file:
view	dwm.c	/^view(const Arg *arg) {$/;"	f
viewscroll	tinou.c	/^viewscroll(const Arg *arg) {$/;"	f	file:
w	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
w	dwm.c	/^	int x, y, w, h;$/;"	m	struct:__anon8	file:
wh	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
win	dwm.c	/^	Window win;$/;"	m	struct:Client	file:
window_opacity_set	dwm.c	/^window_opacity_set(Window win, double opacity)$/;"	f
wintoclient	dwm.c	/^wintoclient(Window w) {$/;"	f
wintomon	dwm.c	/^wintomon(Window w) {$/;"	f
wmatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast];$/;"	v	file:
ww	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
wx	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
wy	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
x	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
x	dwm.c	/^	int x, y, w, h;$/;"	m	struct:__anon8	file:
xerror	dwm.c	/^xerror(Display *dpy, XErrorEvent *ee) {$/;"	f
xerrordummy	dwm.c	/^xerrordummy(Display *dpy, XErrorEvent *ee) {$/;"	f
xerrorstart	dwm.c	/^xerrorstart(Display *dpy, XErrorEvent *ee) {$/;"	f
xerrorxlib	dwm.c	/^static int (*xerrorxlib)(Display *, XErrorEvent *);$/;"	v	file:
xfont	dwm.c	/^		XFontStruct *xfont;$/;"	m	struct:__anon8::__anon9	file:
y	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
y	dwm.c	/^	int x, y, w, h;$/;"	m	struct:__anon8	file:
zoom	dwm.c	/^zoom(const Arg *arg) {$/;"	f
